buildscript {

    repositories {
        gradlePluginPortal()
    }

    dependencies {
        // def taskTreeVersion = getArtifactVersion("task-tree")
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.3.1"
        //def gradleTestsetsPluginVersion = getArtifactVersion("gradle_testsets_plugin")
        // classpath "org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:2.1.1"
        // def springBootGradlePluginVersion = getArtifactVersion("spring-boot-gradle-plugin")
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.16.RELEASE"
        // def gradleGitPropertiesVersion = getArtifactVersion("gradle-git-properties")
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.2.0"
    }
}

def repositoryBaseUrl = "https://repo.immport.org/repository"
def defaultRepositoryUrl = "${repositoryBaseUrl}/maven-public/"
def snapshotRepositoryUrl = "${repositoryBaseUrl}/maven-snapshots/"
def releaseRepositoryUrl = "${repositoryBaseUrl}/maven-releases/"

repositories {
    mavenLocal()
    maven { url "${defaultRepositoryUrl}" }
}

apply plugin: 'com.gorylenko.gradle-git-properties'  // generate file git.properties during the build
apply plugin: 'com.dorongold.task-tree'
apply plugin: 'org.springframework.boot'
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "org.immport.jenkins"
version = "1.0.0-SNAPSHOT"

springBoot {
    backupSource = false // do not backup original jar to *.original
    buildInfo()          // generate file META-INF/build-info.properties during the build
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-web')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

jar {
    version = null
}

task zipFile(type: Zip) {

    // from("$projectDir") {
    //     include 'appSpec.yaml'
    //     into "/"
    // }

    def zipFileRootDirectory = "${project.name}-" + "${project.version}"

    def directory = "src/main/bin"
    if (new File(directory).isDirectory()) {
        from("$directory") {
            fileMode = 0755
            into "$zipFileRootDirectory/bin"
        }
    }

    from("$buildDir/libs") {
        include '*.jar'
        into "$zipFileRootDirectory/lib"
    }

}

zipFile.dependsOn(jar)
build.dependsOn(zipFile)

publishing {

    afterEvaluate {
        repositories {
            maven {
                name 'remote'
                url project.version.endsWith('-SNAPSHOT') ?
                    snapshotRepositoryUrl : releaseRepositoryUrl
                credentials {
                    username = System.getenv('NEXUS_REPOSITORY_USERNAME')
                    password = System.getenv('NEXUS_REPOSITORY_PASSWORD')
                }
            }
        }

		publications {
            artifact(MavenPublication) {
                /*
                 * Publish the zip file
                 */
                artifact source: "$distsDir/${project.name}-${project.version}.zip", classifier: null, extension: 'zip'
            }
        }
    }
}

publish*.dependsOn = [ build ]

task revisionFile(type: Zip) {

    def zipFileRootDirectory = "${project.name}" + "${project.version}"

    def directory = "src/main/bin"
    if (new File(directory).isDirectory()) {
        from("$directory") {
            fileMode = 0755
            into "$zipFileRootDirectory/bin"
        }
    }

    from("$projectDir") {
        include 'appSpec.yaml'
        into "$zipFileRootDirectory/"
    }

    from("$buildDir/libs") {
        include '*.jar'
        into "$zipFileRootDirectory/lib"
    }

}

gitProperties {
    customProperty 'project_name', { project.name } // closure
    customProperty 'project_version', { project.version } // closure
}

